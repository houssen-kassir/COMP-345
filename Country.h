#ifndef COUNTRY_H#define COUNTRY_H#include <iostream>#include <string>#include "Continent.h"/*We need:Country:Id, name, # of armies, neighbors, continent they belong to and player if one owns itContinent: Id, name, list of countries, neighbor continents.Map: connected graph of all continents.*/class Player;class Continent;class Country;class Country {private:/*Member variables*/std::string country_name;std::string continent_name;Continent* containing_continent;Player* owner;bool is_owned;int number_of_armies;std::vector<Country*> connectedCountries;public:Country();Country(std::string name, Continent& continent) : Country(name) { containing_continent = &continent; };Country(std::string name);~Country();Country(const Country &anotherCountry);std::string get_country_name();Player* getOwner() { return owner; }void set_continent_name(std::string c_name);std::string get_continent_name();void setConnectedCountries(std::vector<Country*> connected) { connectedCountries = connected; }std::vector<Country*> getConnectedCountries() { return connectedCountries; }Continent* get_containing_continent() { return containing_continent; };void set_owned(bool value, Player& player);Player* get_owner();std::string get_owner_name();bool owned();void increment_armies(int amt);void decrement_armies(int amt);int get_number_of_armies();void printConnectedCountries();};#endif